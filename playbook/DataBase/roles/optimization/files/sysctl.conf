# 0表示最大限度使用物理内存 ,100表示积极使用swap
vm.swappiness = 0
#  ARP参数，检查一次相邻层记录的有效性的周期。当相邻层记录失效时，将在给它发送数据前，再解析一次。
net.ipv4.neigh.default.gc_stale_time = 120
#   Linux 反向路由查询，检查流入本机的 IP 地址是否合法,
# 0表示关闭 http://www.cnblogs.com/popsuper1982/p/3800562.html
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.default.rp_filter = 0

# 对网络接口上，本地IP地址的发出的，ARP回应， 
# 0 - (默认) 在任意网络接口, 
# 1 -尽量避免不在该网络接口子网段的本地地址做出arp回应.
# 2 -对查询目标使用最适当的本地地址.
net.ipv4.conf.default.arp_announce = 2
net.ipv4.conf.lo.arp_announce = 2
net.ipv4.conf.all.arp_announce = 2

# 表示系统同时保持TIME_WAIT的最大数量，如果超过这个数字，TIME_WAIT将立刻被清除并打印警告信息。
net.ipv4.tcp_max_tw_buckets = 5000

# 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭。
net.ipv4.tcp_syncookies = 1

#表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数。
net.ipv4.tcp_max_syn_backlog = 8192
#开启SYN Cookies，当出现SYN等待队列溢出时，启用cookies来处理
net.ipv4.tcp_syncookies = 1



# # 为了打开对端的连接，内核需要发送一个SYN并附带一个回应前面一个SYN的ACK。
# 也就是所谓三次握手中的第二次握手。这个设置决定了内核放弃连接之前发送SYN+ACK包的数量
# syn-ack握手状态重试次数，默认5，遭受syn-flood攻击时改为1或2
net.ipv4.tcp_synack_retries = 2
#在内核放弃建立连接之前发送SYN包的数量
net.ipv4.tcp_syn_retries = 1



# 关闭IPv6协议
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
# 启用内核转发
net.ipv4.ip_forward = 0	
# 禁用所有IP源路由 
net.ipv4.conf.default.accept_source_route = 0
# 使用sysrq组合键是了解系统目前运行情况，为安全起见设为0关闭
# 在终端上同时按Alt, SysRq和命令键则会执行SysRq命令,
# 不管内核在做什么事情，使用这些组合键能即时打印出内核的信息。0表示关闭,
kernel.sysrq = 0
# 控制core文件的文件名是否添加pid作为扩展
kernel.core_uses_pid = 1

#每个消息队列的大小（单位：字节）限制
kernel.msgmnb = 65536
整个系统最大消息队列数量限制
kernel.msgmax = 65536
# 单个共享内存段的大小（单位：字节）限制
kernel.shmmax = 68719476736
# 所有内存大小（单位：页，1页 = 4Kb）
kernel.shmall = 4294967296


# 管理TCP的选择性应答,允许接收端向发送端传递关于字节流种丢失的序列号,较少了丢失时需要重传的段数目
# 当段丢失频繁时,sack非常有用
net.ipv4.tcp_sack = 1
# 支持更大的TCP窗口. 如果TCP窗口最大超过65535(64K), 必须设置该数值为1
net.ipv4.tcp_window_scaling = 1

# TCP读buffer  第一个值是缓冲区最小值,第二个是默认值,最后一个是最大值
# 缓冲区的值不受core缓冲区的值的限制,但是缓冲区的最大值仍受于core最大值
net.ipv4.tcp_rmem = 4096        87380    4194304
#TCP写buffer
net.ipv4.tcp_wmem = 4096        16384    4194304

#为TCP socket预留用于发送缓冲的内存默认值（单位：字节）
net.core.wmem_default = 8388608
#为TCP socket预留用于发送缓冲的内存最大值（单位：字节）
net.core.wmem_max = 16777216
#为TCP socket预留用于接收缓冲的内存默认值（单位：字节）
net.core.rmem_default = 8388608
#为TCP socket预留用于接收缓冲的内存最大值（单位：字节）
net.core.rmem_max = 16777216

# 每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目
net.core.netdev_max_backlog = 262144
# 通过listen系统调用可以指定的最大accept队列blcklog,当排队的请求数大于该值时,后续的请求连接会被丢弃
# 缺省值为128 ,而nginx定义的NGX_LISTEN_BACKLOG默认为511，所以有必要调整这个值
net.core.somaxconn = 2048
#记录的那些尚未收到客户端确认信息的连接请求的最大值。
# 对于有128M内存的系统而言，缺省值是1024，小内存的系统则是128
net.ipv4.tcp_max_orphans = 3276800

#时间戳可以避免序列号的卷绕。一个1Gbps的链路肯定会遇到以前用过的序列号。
# 时间戳能够让内核接受这种异常的数据包。这里需要将其关掉
net.ipv4.tcp_timestamps = 0

#开启TCP连接中time_wait sockets的快速回收
net.ipv4.tcp_tw_recycle = 1
# 开启TCP连接复用功能，允许将time_wait sockets重新用于新的TCP连接（主要针对time_wait连接）
net.ipv4.tcp_tw_reuse = 1
#1st低于此值,TCP没有内存压力,2nd进入内存压力阶段,3rdTCP拒绝分配socket(单位：内存页)
net.ipv4.tcp_mem = 94500000 915000000 927000000
#如果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2状态的时间。
net.ipv4.tcp_fin_timeout = 1
#表示当keepalive起用的时候，TCP发送keepalive消息的频度（单位：秒）
net.ipv4.tcp_keepalive_time = 30
# 对外连接端口范围
net.ipv4.ip_local_port_range = 1024    65000

#表示文件句柄的最大数量
fs.file-max = 102400